// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/chat.dart';
import 'objectbox-model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 5013505523360421892),
      name: 'Chat',
      lastPropertyId: const obx_int.IdUid(9, 2845209706780752825),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6655946388973949037),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2785878391379912274),
            name: 'message',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4084290079107298590),
            name: 'isUserMessage',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5214359034672398599),
            name: 'timestamp',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2713739939808457237),
            name: 'chatSessionId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 9077298463955823008),
            relationTarget: 'ChatSession'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6276889403726328327),
            name: 'isEdited',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5341085752727922260),
            name: 'originalMessage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3360616801194391790),
            name: 'attachedFilesPathJson',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2845209706780752825),
            name: 'attachedFilesPath',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 4535569352207545955),
      name: 'ChatSession',
      lastPropertyId: const obx_int.IdUid(5, 3019219561447462431),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8814061571969131793),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6787590904864729058),
            name: 'modelName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5144399487899484448),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8721283199662368708),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3019219561447462431),
            name: 'lastUpdatedAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'chats', srcEntity: 'Chat', srcField: 'chatSession')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 1210440727587123249),
      name: 'ObjectBoxModel',
      lastPropertyId: const obx_int.IdUid(1, 276061838713752609),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 276061838713752609),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 1210440727587123249),
      lastIndexId: const obx_int.IdUid(1, 9077298463955823008),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Chat: obx_int.EntityDefinition<Chat>(
        model: _entities[0],
        toOneRelations: (Chat object) => [object.chatSession],
        toManyRelations: (Chat object) => {},
        getId: (Chat object) => object.id,
        setId: (Chat object, int id) {
          object.id = id;
        },
        objectToFB: (Chat object, fb.Builder fbb) {
          final messageOffset = fbb.writeString(object.message);
          final originalMessageOffset = object.originalMessage == null
              ? null
              : fbb.writeString(object.originalMessage!);
          final attachedFilesPathJsonOffset =
              fbb.writeString(object.attachedFilesPathJson);
          final attachedFilesPathOffset = fbb.writeList(object.attachedFilesPath
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, messageOffset);
          fbb.addBool(2, object.isUserMessage);
          fbb.addInt64(3, object.timestamp.millisecondsSinceEpoch);
          fbb.addInt64(4, object.chatSession.targetId);
          fbb.addBool(5, object.isEdited);
          fbb.addOffset(6, originalMessageOffset);
          fbb.addOffset(7, attachedFilesPathJsonOffset);
          fbb.addOffset(8, attachedFilesPathOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final messageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final isUserMessageParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final timestampParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final isEditedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final originalMessageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final attachedFilesPathParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 20, []);
          final object = Chat(
              id: idParam,
              message: messageParam,
              isUserMessage: isUserMessageParam,
              timestamp: timestampParam,
              isEdited: isEditedParam,
              originalMessage: originalMessageParam,
              attachedFilesPath: attachedFilesPathParam)
            ..attachedFilesPathJson =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 18, '');
          object.chatSession.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.chatSession.attach(store);
          return object;
        }),
    ChatSession: obx_int.EntityDefinition<ChatSession>(
        model: _entities[1],
        toOneRelations: (ChatSession object) => [],
        toManyRelations: (ChatSession object) => {
              obx_int.RelInfo<Chat>.toOneBacklink(
                      5, object.id, (Chat srcObject) => srcObject.chatSession):
                  object.chats
            },
        getId: (ChatSession object) => object.id,
        setId: (ChatSession object, int id) {
          object.id = id;
        },
        objectToFB: (ChatSession object, fb.Builder fbb) {
          final modelNameOffset = fbb.writeString(object.modelName);
          final titleOffset = fbb.writeString(object.title);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, modelNameOffset);
          fbb.addInt64(2, object.createdAt.millisecondsSinceEpoch);
          fbb.addOffset(3, titleOffset);
          fbb.addInt64(4, object.lastUpdatedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final modelNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final lastUpdatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final object = ChatSession(
              id: idParam,
              modelName: modelNameParam,
              title: titleParam,
              createdAt: createdAtParam,
              lastUpdatedAt: lastUpdatedAtParam);
          obx_int.InternalToManyAccess.setRelInfo<ChatSession>(
              object.chats,
              store,
              obx_int.RelInfo<Chat>.toOneBacklink(
                  5, object.id, (Chat srcObject) => srcObject.chatSession));
          return object;
        }),
    ObjectBoxModel: obx_int.EntityDefinition<ObjectBoxModel>(
        model: _entities[2],
        toOneRelations: (ObjectBoxModel object) => [],
        toManyRelations: (ObjectBoxModel object) => {},
        getId: (ObjectBoxModel object) => object.id,
        setId: (ObjectBoxModel object, int id) {
          object.id = id;
        },
        objectToFB: (ObjectBoxModel object, fb.Builder fbb) {
          fbb.startTable(2);
          fbb.addInt64(0, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ObjectBoxModel()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Chat] entity fields to define ObjectBox queries.
class Chat_ {
  /// See [Chat.id].
  static final id = obx.QueryIntegerProperty<Chat>(_entities[0].properties[0]);

  /// See [Chat.message].
  static final message =
      obx.QueryStringProperty<Chat>(_entities[0].properties[1]);

  /// See [Chat.isUserMessage].
  static final isUserMessage =
      obx.QueryBooleanProperty<Chat>(_entities[0].properties[2]);

  /// See [Chat.timestamp].
  static final timestamp =
      obx.QueryDateProperty<Chat>(_entities[0].properties[3]);

  /// See [Chat.chatSession].
  static final chatSession =
      obx.QueryRelationToOne<Chat, ChatSession>(_entities[0].properties[4]);

  /// See [Chat.isEdited].
  static final isEdited =
      obx.QueryBooleanProperty<Chat>(_entities[0].properties[5]);

  /// See [Chat.originalMessage].
  static final originalMessage =
      obx.QueryStringProperty<Chat>(_entities[0].properties[6]);

  /// See [Chat.attachedFilesPathJson].
  static final attachedFilesPathJson =
      obx.QueryStringProperty<Chat>(_entities[0].properties[7]);

  /// See [Chat.attachedFilesPath].
  static final attachedFilesPath =
      obx.QueryStringVectorProperty<Chat>(_entities[0].properties[8]);
}

/// [ChatSession] entity fields to define ObjectBox queries.
class ChatSession_ {
  /// See [ChatSession.id].
  static final id =
      obx.QueryIntegerProperty<ChatSession>(_entities[1].properties[0]);

  /// See [ChatSession.modelName].
  static final modelName =
      obx.QueryStringProperty<ChatSession>(_entities[1].properties[1]);

  /// See [ChatSession.createdAt].
  static final createdAt =
      obx.QueryDateProperty<ChatSession>(_entities[1].properties[2]);

  /// See [ChatSession.title].
  static final title =
      obx.QueryStringProperty<ChatSession>(_entities[1].properties[3]);

  /// See [ChatSession.lastUpdatedAt].
  static final lastUpdatedAt =
      obx.QueryDateProperty<ChatSession>(_entities[1].properties[4]);

  /// see [ChatSession.chats]
  static final chats =
      obx.QueryBacklinkToMany<Chat, ChatSession>(Chat_.chatSession);
}

/// [ObjectBoxModel] entity fields to define ObjectBox queries.
class ObjectBoxModel_ {
  /// See [ObjectBoxModel.id].
  static final id =
      obx.QueryIntegerProperty<ObjectBoxModel>(_entities[2].properties[0]);
}
